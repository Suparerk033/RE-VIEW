import React, { useEffect, useState } from 'react';
import {
  Form, Input, Button, Rate, message,
  Card, Typography, Upload, Image, Spin
} from 'antd';
import { UploadOutlined, SaveOutlined } from '@ant-design/icons';
import axios from 'axios';
import { useParams, useNavigate } from 'react-router-dom';

const { Title, Paragraph } = Typography;

function EditReview() {
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [fileList, setFileList] = useState([]);
  const [preview, setPreview] = useState(null);
  const [originalImage, setOriginalImage] = useState(null);
  const { id } = useParams();
  const navigate = useNavigate();

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÄ‡∏Å‡πà‡∏≤
  useEffect(() => {
    const fetchReview = async () => {
      try {
        const res = await axios.get('http://localhost:5000/api/reviews', { withCredentials: true });
        const review = res.data.find(r => r.review_id.toString() === id.toString());
        if (!review) {
          message.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç');
          return navigate('/');
        }

        // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô warning ‡∏î‡πâ‡∏ß‡∏¢ setTimeout
        setTimeout(() => {
          form.setFieldsValue({
            title: review.title,
            content: review.content,
            rating: review.rating,
          });
        }, 0);

        if (review.image_url) {
          setOriginalImage(`http://localhost:5000${review.image_url}`);
        }
      } catch (err) {
        message.error('‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
      } finally {
        setLoading(false);
      }
    };

    fetchReview();
  }, [id, form, navigate]);

  const handleFileChange = ({ fileList }) => {
    const rawFile = fileList?.[0]?.originFileObj;
    if (!rawFile) return;

    const isValidType = ['image/jpeg', 'image/png', 'image/webp'].includes(rawFile.type);
    const isValidSize = rawFile.size / 1024 / 1024 <= 2;

    if (!isValidType) {
      message.error('‚ùå ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå JPG, PNG ‡∏´‡∏£‡∏∑‡∏≠ WEBP ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
      return;
    }

    if (!isValidSize) {
      message.error('‚ùå ‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 2MB');
      return;
    }

    setFileList(fileList);
    setPreview(URL.createObjectURL(rawFile));
  };

  // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  const handleSubmit = async (values) => {
    const formData = new FormData();
    formData.append('title', values.title);
    formData.append('content', values.content);
    formData.append('rating', values.rating);

    if (fileList.length > 0 && fileList[0].originFileObj) {
      formData.append('image', fileList[0].originFileObj);
    }

    try {
      setSaving(true);
      await axios.put(`http://localhost:5000/api/reviews/${id}`, formData, {
        withCredentials: true,
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      message.success('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!');
      navigate('/profile');
    } catch (error) {
      console.error('üî• ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
      message.error(error?.response?.data?.message || '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
    } finally {
      setSaving(false);
    }
  };

  if (loading) {
    return <Spin size="large" style={{ display: 'block', margin: '4rem auto' }} />;
  }

  return (
    <div style={{ maxWidth: 700, margin: '3rem auto' }}>
      <Card style={{ padding: 24, boxShadow: '0 4px 12px rgba(0,0,0,0.1)' }}>
        <Title level={3}>‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</Title>
        <Paragraph type="secondary" style={{ marginBottom: 24 }}>
          ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        </Paragraph>

        <Form
          form={form}
          layout="vertical"
          onFinish={handleSubmit}
        >
          <Form.Item
            name="title"
            label="‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏£‡∏µ‡∏ß‡∏¥‡∏ß"
            rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏£‡∏µ‡∏ß‡∏¥‡∏ß' }]}
          >
            <Input placeholder="‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏£‡∏µ‡∏ß‡∏¥‡∏ß" />
          </Form.Item>

          <Form.Item
            name="content"
            label="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"
            rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î' }]}
          >
            <Input.TextArea rows={4} placeholder="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏µ‡∏ß‡∏¥‡∏ß..." />
          </Form.Item>

          <Form.Item
            name="rating"
            label="‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à"
            rules={[{ required: true }]}
          >
            <Rate />
          </Form.Item>

          <Form.Item label="‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)">
            <Upload
              showUploadList={false}
              beforeUpload={() => false}
              onChange={handleFileChange}
              accept=".jpg,.jpeg,.png,.webp"
            >
              <Button icon={<UploadOutlined />}>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà</Button>
            </Upload>
            {preview && (
              <Image
                src={preview}
                alt="Preview"
                style={{ marginTop: 12, maxHeight: 200, borderRadius: 8 }}
              />
            )}
            {!preview && originalImage && (
              <Image
                src={originalImage}
                alt="Original"
                style={{ marginTop: 12, maxHeight: 200, borderRadius: 8 }}
              />
            )}
          </Form.Item>

          <Form.Item>
            <Button
              type="primary"
              htmlType="submit"
              block
              loading={saving}
              icon={<SaveOutlined />}
            >
              ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
            </Button>
          </Form.Item>
        </Form>
      </Card>
    </div>
  );
}

export default EditReview;
