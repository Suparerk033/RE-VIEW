generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model comments {
  comment_id Int       @id @default(autoincrement())
  review_id  Int?
  user_id    Int?
  content    String
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users?    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model review_images {
  image_id   Int    @id @default(autoincrement())
  review_id  Int?
  image_path String
}

model review_likes {
  like_id    Int       @id @default(autoincrement())
  review_id  Int?
  user_id    Int?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users?    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([review_id, user_id])
}

model reviews {
  review_id  Int       @id @default(autoincrement())
  user_id    Int
  title      String
  content    String
  rating     Int
  image_url  String?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model roles {
  role_id   Int     @id @default(autoincrement())
  role_name String  @unique @db.VarChar(50)
  users     users[]
}

model users {
  user_id      Int            @id @default(autoincrement())
  name         String         @db.VarChar(100)
  email        String         @unique @db.VarChar(100)
  password     String?
  google_id    String?
  profile_pic  String?
  role_id      Int?
  login_method String?        @db.VarChar(20)
  created_at   DateTime?      @default(now()) @db.Timestamp(6)
  comments     comments[]
  review_likes review_likes[]
  reviews      reviews[]
  roles        roles?         @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction)
}
